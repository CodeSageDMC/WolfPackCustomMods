// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from WorldObjectTemplate.tt />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Occupancy;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Gameplay.Pipes.LiquidComponents;
    using Eco.Gameplay.Pipes.Gases;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Shared.Networking;
    using Eco.Gameplay.Pipes;
    using Eco.World.Blocks;
    using Eco.Gameplay.Housing.PropertyValues;
    using Eco.Gameplay.Civics.Objects;
    using Eco.Gameplay.Settlements;
    using Eco.Gameplay.Systems.NewTooltip;
    using Eco.Core.Controller;
    using Eco.Core.Utils;
    using Eco.Gameplay.Components.Storage;
    using static Eco.Gameplay.Housing.PropertyValues.HomeFurnishingValue;
    using Eco.Gameplay.Items.Recipes;

    [Serialized]
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(HousingComponent))]
    [RequireComponent(typeof(OccupancyRequirementComponent))]
    [RequireComponent(typeof(MountComponent))]
    [RequireComponent(typeof(ForSaleComponent))]    
    [Tag("Usable")]
    [Ecopedia("Housing Objects", "Seating", subPageName: "Log Bench Item")]
    public partial class LogBenchObject : WorldObject, IRepresentsItem
    {
        public virtual Type RepresentedItemType => typeof(LogBenchItem);
        public override LocString DisplayName => Localizer.DoStr("Log Bench");
        public override TableTextureMode TableTexture => TableTextureMode.Wood;

        protected override void Initialize()
        {
            this.ModsPreInitialize();
            this.GetComponent<HousingComponent>().HomeValue = LogBenchItem.homeValue;
            this.GetComponent<MountComponent>().Initialize(3, true);
            this.ModsPostInitialize();
        }
        protected override void OnCreatePostInitialize()
        {
            base.OnCreatePostInitialize();
            this.GetComponent<PropertyAuthComponent>().SetPublic();
        }

       
        partial void ModsPreInitialize();
        
        partial void ModsPostInitialize();
    }

    [Serialized]
    [LocDisplayName("Log Bench")]
    [LocDescription("A very basic wooden log bench.")]
    [Ecopedia("Housing Objects", "Seating", createAsSubPage: true)]
    [Tag("Housing")]
    [Tag("Mountable")]
    [Weight(1000)] 
    [Tag(nameof(SurfaceTags.CanBeOnRug))]
    public partial class LogBenchItem : WorldObjectItem<LogBenchObject>
    {
        protected override OccupancyContext GetOccupancyContext => new SideAttachedContext(0 | DirectionAxisFlags.Down, WorldObject.GetOccupancyInfo(this.WorldObjectType));
        public override HomeFurnishingValue HomeValue => homeValue;
        public static readonly HomeFurnishingValue homeValue = new HomeFurnishingValue()
        {
            ObjectName = typeof(LogBenchObject).UILink(),
            Category = HousingConfig.GetRoomCategory("Seating"),
            BaseValue = 1f,
            TypeForRoomLimit = Localizer.DoStr("Chair"),
            DiminishingReturnMultiplier = 0.5f

        };

    }

    
    [RequiresSkill(typeof(SelfImprovementSkill), 1)]
    [Ecopedia("Housing Objects", "Seating", subPageName: "Log Bench Item")]
    public partial class LogBenchRecipe : RecipeFamily
    {
        public LogBenchRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "LogBench",  //noloc
                displayName: Localizer.DoStr("Log Bench"),

                
                ingredients: new List<IngredientElement>
                {
                    new IngredientElement("Wood", 30, typeof(SelfImprovementSkill), typeof(SelfImprovementLavishResourcesTalent)), //noloc
                    
                },

               
                items: new List<CraftingElement>
                {
                    new CraftingElement<LogBenchItem>()
                });
            this.Recipes = new List<Recipe> { recipe };
            this.ExperienceOnCraft = .25f; 

            
            this.LaborInCalories = CreateLaborInCaloriesValue(60, typeof(SelfImprovementSkill));

           
            this.CraftMinutes = CreateCraftTimeValue(beneficiary: typeof(LogBenchRecipe), start: 2f, skillType: typeof(SelfImprovementSkill), typeof(SelfImprovementFocusedSpeedTalent), typeof(SelfImprovementParallelSpeedTalent));   

           
            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Log Bench"), recipeType: typeof(LogBenchRecipe));
            this.ModsPostInitialize();

           
            CraftingComponent.AddRecipe(tableType: typeof(WorkbenchObject), recipe: this);
        }

       
        partial void ModsPreInitialize();

       
        partial void ModsPostInitialize();
    }
}
