// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from WorldObjectTemplate.tt />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Interactions.Interactors;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Occupancy;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Shared.Networking;
    using Eco.World.Blocks;
    using Eco.Gameplay.Housing.PropertyValues;
    using Eco.Gameplay.Civics.Objects;
    using Eco.Gameplay.Settlements;
    using Eco.Gameplay.Systems.NewTooltip;
    using Eco.Core.Controller;
    using Eco.Core.Utils;
    using Eco.Gameplay.Components.Storage;


    using Eco.Gameplay.Items.Recipes;
    using System.Linq;
    using static Eco.Gameplay.Components.PartsComponent;
    using Eco.Gameplay.Auth;
    using Eco.Gameplay.GameActions;
    using Eco.Shared.IoC;
    using Eco.Shared.SharedTypes;
    using Eco.Gameplay.Components.Store;
    using Eco.Gameplay.Systems.EnvVars;
    using Eco.Gameplay.Wires;





    //Object


    [Serialized]
    [RequireComponent(typeof(OnOffComponent))]
    [RequireComponent(typeof(PropertyAuthComponent))]    
    [RequireComponent(typeof(OccupancyRequirementComponent))]
    [Tag("Usable")]
    public partial class TARDISObject : WorldObject, IRepresentsItem, IHasEnvVars, IHasInteractions
    {
        private OnOffComponent onOffComponent;
        [Serialized] public bool TARDISDoor { get; set; }


        public virtual Type RepresentedItemType => typeof(TARDISItem);
        public override LocString DisplayName => Localizer.DoStr("TARDIS");
        public override TableTextureMode TableTexture => TableTextureMode.Wood;

        static TARDISObject()
        {

            WorldObject.AddOccupancy<TARDISObject>(new List<BlockOccupancy>(){
            new BlockOccupancy(new Vector3i(0, 0, 0)),
            new BlockOccupancy(new Vector3i(1, 0, 0)),
            new BlockOccupancy(new Vector3i(0, 0, 1)),
            new BlockOccupancy(new Vector3i(1, 0, 1)),
            new BlockOccupancy(new Vector3i(-1, 0, 0)),
            new BlockOccupancy(new Vector3i(-1, 0, 1)),

            new BlockOccupancy(new Vector3i(0, 1, 0)),
            new BlockOccupancy(new Vector3i(1, 1, 0)),
            new BlockOccupancy(new Vector3i(0, 1, 1)),
            new BlockOccupancy(new Vector3i(1, 1, 1)),
            new BlockOccupancy(new Vector3i(-1, 1, 0)),
            new BlockOccupancy(new Vector3i(-1, 1, 1)),

            new BlockOccupancy(new Vector3i(0, 2, 0)),
            new BlockOccupancy(new Vector3i(1, 2, 0)),
            new BlockOccupancy(new Vector3i(0, 2, 1)),
            new BlockOccupancy(new Vector3i(1, 2, 1)),
            new BlockOccupancy(new Vector3i(-1, 2, 0)),
            new BlockOccupancy(new Vector3i(-1, 2, 1)),
            });
        }

        protected override void Initialize()
        {

            this.ModsPreInitialize();
            onOffComponent = this.GetComponent<OnOffComponent>();

            this.ModsPostInitialize();           

        }



        [Interaction(InteractionTrigger.InteractKey, "Enter", MinCaloriesRequired = 0, AccessForHighlight = AccessType.ConsumerAccess)]
        public void Enter(Player player, InteractionTriggerInfo trigger, InteractionTarget target)
        {
            var isAuthorized = ServiceHolder<IAuthManager>.Obj.IsAuthorized(this, player.User);   
            if (target.ContainsParameter("TARDISDoor"))
                if (isAuthorized)
                {
                    TARDISDoor = !TARDISDoor;
                    var pos2d = new Vector2i(490, 317);
                    var y = 7;
                    player.SetPosition(pos2d.X_Z(y));
                    return;
                }
                else
                {                    
                    player.ErrorLocStr("You Are Not Authorized To Do That");
                    return;
                }
        }
        public override void Tick()
        {
            base.Tick();
            SetAnimatedState("TARDISDoor", this.TARDISDoor);
        }


        partial void ModsPreInitialize();

        partial void ModsPostInitialize();

    }






    //Item


    [Serialized]
    [LocDisplayName("TARDIS")]
    [LocDescription("Time And Relative Dimension In Space.")]
    [Category("Hidden"), Tag("NotInBrowser")]
    [Weight(2000)]
    [MaxStackSize(420)]
   
    public partial class TARDISItem : WorldObjectItem<TARDISObject>, IPersistentData
    {
        protected override OccupancyContext GetOccupancyContext => new SideAttachedContext(DirectionAxisFlags.Down, WorldObject.GetOccupancyInfo(this.WorldObjectType));



        [Serialized, SyncToView, NewTooltipChildren(CacheAs.Instance, flags: TTFlags.AllowNonControllerTypeForChildren)] public object PersistentData { get; set; }
    }




    
}
