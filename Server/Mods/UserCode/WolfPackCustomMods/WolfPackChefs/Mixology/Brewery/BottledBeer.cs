// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from FoodTemplate.tt/>

namespace Eco.Mods.TechTree
{
    using System.Collections.Generic;
    using Eco.Core.Items;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.Time;
    using Eco.Core.Controller;
    using Eco.Gameplay.Items.Recipes;
   


    [Serialized] 
    [LocDisplayName("Bottled Beer")] 
    [Weight(100)] 
    [Ecopedia("Food", "Brewery", createAsSubPage: true)]
    [LocDescription("Bottled Beer.")] 
    public partial class BottledBeerItem : FoodItem
    {


       
        public override float Calories => 50;
        
        public override Nutrients Nutrition => new Nutrients() { Carbs = 15, Fat = 0, Protein = 0, Vitamins = 0 };

        
        protected override float BaseShelfLife => (float)TimeUtil.HoursToSeconds(72);

        public override string OnUsed(Player player, ItemStack itemStack)
        {
            player.User.Inventory.TryAddItemNonUnique(typeof(GlassBottleItem));
            
            return base.OnUsed(player, itemStack);
            
        }
        public override string Consume(Player player) => OnUsed(player, player.User.Inventory.Toolbar.SelectedStack);
    }


    
    [RequiresSkill(typeof(MixologySkill), 5)]
    [Ecopedia("Food", "Brewery", subPageName: "Bottled Beer Item")]
    public partial class BottledBeerRecipe : RecipeFamily
    {
        public BottledBeerRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "Bottle Beer",  //noloc
                displayName: Localizer.DoStr("Bottle Beer"),

                
                ingredients: new List<IngredientElement>
                {
                    new IngredientElement(typeof(AgedBeerItem), 1, true),
                    new IngredientElement(typeof(GlassBottleItem), 75, true),
            
                },

               
                items: new List<CraftingElement>
                {
                    new CraftingElement<BottledBeerItem>(75),

                });
            this.Recipes = new List<Recipe> { recipe };
            this.ExperienceOnCraft = 2;

            
            this.LaborInCalories = CreateLaborInCaloriesValue(500, typeof(MixologySkill));

            
            this.CraftMinutes = CreateCraftTimeValue(beneficiary: typeof(BottledBeerRecipe), start: 5f, skillType: typeof(MixologySkill));

       
            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Bottle Beer"), recipeType: typeof(BottledBeerRecipe));
            this.ModsPostInitialize();

          
            CraftingComponent.AddRecipe(tableType: typeof(AlcoholCaskObject), recipe: this);
        }

       
        partial void ModsPreInitialize();

      
        partial void ModsPostInitialize();
    }
}