// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from WorldObjectTemplate.tt />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Occupancy;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Gameplay.Pipes.LiquidComponents;
    using Eco.Gameplay.Pipes.Gases;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Shared.Networking;
    using Eco.Gameplay.Pipes;
    using Eco.World.Blocks;
    using Eco.Gameplay.Housing.PropertyValues;
    using Eco.Gameplay.Civics.Objects;
    using Eco.Gameplay.Settlements;
    using Eco.Gameplay.Systems.NewTooltip;
    using Eco.Core.Controller;
    using Eco.Core.Utils;
    using Eco.Gameplay.Components.Storage;
    using static Eco.Gameplay.Components.PartsComponent;
    using Eco.Gameplay.Items.Recipes;

    [Serialized]
    [RequireComponent(typeof(OnOffComponent))]
    [RequireComponent(typeof(StatusComponent))]
    [RequireComponent(typeof(LiquidConverterComponent))]    
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(LinkComponent))]
    [RequireComponent(typeof(PublicStorageComponent))]
    [RequireComponent(typeof(CraftingComponent))]
    [RequireComponent(typeof(PartsComponent))]
    [RequireComponent(typeof(OccupancyRequirementComponent))]
    [RequireComponent(typeof(PluginModulesComponent))]
    [RequireComponent(typeof(ForSaleComponent))]
    [RequireComponent(typeof(RoomRequirementsComponent))]
    [RequireRoomContainment]
    [RequireRoomVolume(24)]
    [RequireRoomMaterialTier(2.8f, typeof(BiochemistLavishReqTalent), typeof(BiochemistFrugalReqTalent))]
    [Tag("Usable")]
    [Ecopedia("Work Stations", "Craft Tables", subPageName: "Lab Item")]
    [RepairRequiresSkill(typeof(MechanicsSkill), 1)]
    [RepairRequiresSkill(typeof(SelfImprovementSkill), 5)]
    public partial class LabObject : WorldObject, IRepresentsItem
    {
        public virtual Type RepresentedItemType => typeof(LabItem);
        public override LocString DisplayName => Localizer.DoStr("Biochemist Laboratory");
        public override TableTextureMode TableTexture => TableTextureMode.Metal;


        static LabObject()
        {
            WorldObject.AddOccupancy<LabObject>(new List<BlockOccupancy>()
            {
                
                new BlockOccupancy(new Vector3i(0, 0, 0)),
                new BlockOccupancy(new Vector3i(1, 0, 0)),
                new BlockOccupancy(new Vector3i(2, 0, 0)),
                new BlockOccupancy(new Vector3i(0, 0, 1), typeof(PipeSlotBlock), new Quaternion(0f, 0f, 1f, 0f), BlockOccupancyType.WaterInputPort),
                new BlockOccupancy(new Vector3i(1, 0, 1)),
                new BlockOccupancy(new Vector3i(2, 0, 1), typeof(PipeSlotBlock), new Quaternion(0f, 0f, 1f, 0f), BlockOccupancyType.SewageOutputPort),
                
                new BlockOccupancy(new Vector3i(0, 1, 0)),
                new BlockOccupancy(new Vector3i(1, 1, 0)),
                new BlockOccupancy(new Vector3i(2, 1, 0)),
                new BlockOccupancy(new Vector3i(0, 1, 1)),
                new BlockOccupancy(new Vector3i(1, 1, 1)),
                new BlockOccupancy(new Vector3i(2, 1, 1)),
                
                new BlockOccupancy(new Vector3i(0, 2, 0)),
                new BlockOccupancy(new Vector3i(1, 2, 0)),
                new BlockOccupancy(new Vector3i(2, 2, 0)),
                new BlockOccupancy(new Vector3i(0, 2, 1)),
                new BlockOccupancy(new Vector3i(1, 2, 1)),
                new BlockOccupancy(new Vector3i(2, 2, 1)),
                
            });
        }
        protected override void Initialize()
        {
            this.ModsPreInitialize();
            this.GetComponent<LiquidConverterComponent>().Setup(typeof(WaterItem), typeof(SewageItem), BlockOccupancyType.WaterInputPort, BlockOccupancyType.SewageOutputPort, 0.3f, 0.9f);
            this.GetComponent<LinkComponent>().Initialize(12);
            var storage = this.GetComponent<PublicStorageComponent>();
            storage.Initialize(32);
            storage.Storage.AddInvRestriction(new NotCarriedRestriction());
            this.ModsPostInitialize();
            {
                this.GetComponent<PartsComponent>().Config(() => LocString.Empty, new PartInfo[]
                {
                                        new() { TypeName = nameof(GlassBeakersItem), Quantity = 1},
                                    });
            }
        }

        
        partial void ModsPreInitialize();
       
        partial void ModsPostInitialize();
    }

    [Serialized]
    [LocDisplayName("Biochemist Laboratory")]
    [LocDescription("For more advanced manufacturing. Science rules!")]
    [Ecopedia("Work Stations", "Craft Tables", createAsSubPage: true)]
    [Weight(2000)]
    [Tag(nameof(SurfaceTags.CanBeOnRug))]
    [AllowPluginModules(Tags = new[] { "ModernUpgrade" }, ItemTypes = new[] { typeof(BiochemistUpgradeItem) })] //noloc
    public partial class LabItem : WorldObjectItem<LabObject>, IPersistentData
    {
        protected override OccupancyContext GetOccupancyContext => new SideAttachedContext(DirectionAxisFlags.Down, WorldObject.GetOccupancyInfo(this.WorldObjectType));

        [Serialized, SyncToView, NewTooltipChildren(CacheAs.Instance, flags: TTFlags.AllowNonControllerTypeForChildren)] public object PersistentData { get; set; }
    }

   
    [RequiresSkill(typeof(MechanicsSkill), 3)]
    [Ecopedia("Work Stations", "Craft Tables", subPageName: "Biochemist Laboratory Item")]
    public partial class LabRecipe : RecipeFamily
    {
        public LabRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "Lab",  //noloc
                displayName: Localizer.DoStr("Lab"),

                ingredients: new List<IngredientElement>
                {
                    new IngredientElement("Modern Research", 20, typeof(MechanicsSkill), typeof(MechanicsLavishResourcesTalent)),
                    new IngredientElement("Lumber", 20, typeof(MechanicsSkill), typeof(MechanicsLavishResourcesTalent)),
                    new IngredientElement(typeof(ScrewsItem), 25, typeof(MechanicsSkill), typeof(MechanicsLavishResourcesTalent)),
                    new IngredientElement(typeof(SteelPipeItem), 5, typeof(MechanicsSkill), typeof(MechanicsLavishResourcesTalent)),
                    new IngredientElement(typeof(SteelBarItem), 10, typeof(MechanicsSkill), typeof(MechanicsLavishResourcesTalent)),
                    new IngredientElement(typeof(GlassBeakersItem), 10, typeof(MechanicsSkill), typeof(MechanicsLavishResourcesTalent)),
                    
                     
                },

               
                items: new List<CraftingElement>
                {
                    new CraftingElement<LabItem>()
                });
            this.Recipes = new List<Recipe> { recipe };
            this.ExperienceOnCraft = 3; 

            
            this.LaborInCalories = CreateLaborInCaloriesValue(120, typeof(MechanicsSkill));

           
            this.CraftMinutes = CreateCraftTimeValue(beneficiary: typeof(LabRecipe), start: 15, skillType: typeof(MechanicsSkill), typeof(MechanicsFocusedSpeedTalent), typeof(MechanicsParallelSpeedTalent));

            
            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Biochemist Laboratory"), recipeType: typeof(LabRecipe));
            this.ModsPostInitialize();

          
            CraftingComponent.AddRecipe(tableType: typeof(MachinistTableObject), recipe: this);
        }

       
        partial void ModsPreInitialize();

        
        partial void ModsPostInitialize();
    }
}
