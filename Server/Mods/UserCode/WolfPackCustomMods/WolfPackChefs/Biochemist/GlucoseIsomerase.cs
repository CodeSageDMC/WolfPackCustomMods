// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from FoodTemplate.tt/>

namespace Eco.Mods.TechTree
{
    using Eco.Core.Items;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Players;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.Time;
    using System;
    using System.Collections.Generic;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Skills;
    using Eco.Shared.Items;
    using Eco.World;
    using Eco.World.Blocks;
    using Gameplay.Systems.TextLinks;
    using Eco.Core.Controller;
    using Eco.Gameplay.Settlements.ClaimStakes;
    using Eco.Gameplay.Items.Recipes;


    /// <summary>
    /// <para>
    /// Server side food GlucoseIsomerase definition for the "GlucoseIsomerase" GlucoseIsomerase. 
    /// This object inherits the FoodGlucoseIsomerase base class to allow for consumption mechanics.
    /// </para>
    /// <para>More information about FoodGlucoseIsomerase objects can be found at https://docs.play.eco/api/server/eco.gameplay/Eco.Gameplay.GlucoseIsomerases.FoodGlucoseIsomerase.html</para>
    /// </summary>
    /// <remarks>
    /// This is an auto-generated class. Don't modify it! All your changes will be wiped with next update! Use Mods* partial methods instead for customization. 
    /// If you wish to modify this class, please create a new partial class or follow the instructions in the "UserCode" folder to override the entire file.
    /// </remarks>
    [Serialized] // Tells the save/load system this object needs to be serialized. 
    [LocDisplayName("Glucose Isomerase Enzyme")] // Defines the localized name of the GlucoseIsomerase.
    [Weight(300)] // Defines how heavy the GlucoseIsomerase is.

    [Ecopedia("Food", "Product", createAsSubPage: true)]
    [LocDescription("An Enzyme made from fungi.")] //The tooltip description for the food GlucoseIsomerase.
    public partial class GlucoseIsomeraseItem : FoodItem
    {


        /// <summary>The amount of calories awarded for eating the food GlucoseIsomerase.</summary>
        public override float Calories => 0;
        /// <summary>The nutritional value of the food GlucoseIsomerase.</summary>
        public override Nutrients Nutrition => new Nutrients() { Carbs = 0, Fat = 0, Protein = 0, Vitamins = 0 };

        /// <summary>Defines the default time it takes for this GlucoseIsomerase to spoil. This value can be modified by the inventory this GlucoseIsomerase currently resides in.</summary>
        protected override float BaseShelfLife => (float)TimeUtil.HoursToSeconds(72);
    }



    [RequiresSkill(typeof(BiochemistSkill), 2)]
    public partial class GlucoseIsomeraseRecipe : RecipeFamily
    {
        public GlucoseIsomeraseRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "GlucoseIsomerase",  //noloc
                displayName: Localizer.DoStr("Extract Glucose Isomerase Enzyme"),

                // Defines the ingredients needed to craft this recipe. An ingredient GlucoseIsomerases takes the following inputs
                // type of the GlucoseIsomerase, the amount of the GlucoseIsomerase, the skill required, and the talent used.
                ingredients: new List<IngredientElement>
                {
                    new IngredientElement("Fungus", 50, typeof(BiochemistSkill), typeof(BiochemistLavishResourcesTalent)),
                    
                },

                // Define our recipe output GlucoseIsomerases.
                // For every output GlucoseIsomerase there needs to be one CraftingElement entry with the type of the final GlucoseIsomerase and the amount
                // to create.
                items: new List<CraftingElement>
                {
                    new CraftingElement<GlucoseIsomeraseItem>(5),
                });
            this.Recipes = new List<Recipe> { recipe };
            this.ExperienceOnCraft = 1; // Defines how much experience is gained when crafted.

            // Defines the amount of labor required and the required skill to add labor
            this.LaborInCalories = CreateLaborInCaloriesValue(600, typeof(BiochemistSkill));

            // Defines our crafting time for the recipe
            this.CraftMinutes = CreateCraftTimeValue(beneficiary: typeof(GlucoseIsomeraseRecipe), start: 6f, skillType: typeof(BiochemistSkill), typeof(BiochemistFocusedSpeedTalent), typeof(BiochemistParallelSpeedTalent));

            // Perform pre/post initialization for user mods and initialize our recipe instance with the display name "GlucoseIsomerase"
            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Extract Glucose Isomerase Enzyme"), recipeType: typeof(GlucoseIsomeraseRecipe));
            this.ModsPostInitialize();

    // Register our RecipeFamily instance with the crafting system so it can be crafted.
    CraftingComponent.AddRecipe(tableType: typeof(ChemicalLaboratoryObject), recipe: this);
    }

    /// <summary>Hook for mods to customize RecipeFamily before initialization. You can change recipes, xp, labor, time here.</summary>
    partial void ModsPreInitialize();

    /// <summary>Hook for mods to customize RecipeFamily after initialization, but before registration. You can change skill requirements here.</summary>
    partial void ModsPostInitialize();
}



}
