// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from FoodTemplate.tt/>

namespace Eco.Mods.TechTree
{
    using Eco.Core.Items;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Players;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.Time;
    using System;
    using System.Collections.Generic;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Skills;
    using Eco.Shared.Items;
    using Eco.World;
    using Eco.World.Blocks;
    using Gameplay.Systems.TextLinks;
    using Eco.Core.Controller;
    using Eco.Gameplay.Settlements.ClaimStakes;
    using Eco.Gameplay.Items.Recipes;




    //FoodItem


    [Serialized]
    [LocDisplayName("Vanilla Extract")]
    [Weight(100)]
    [Tag("Food")]
    [Ecopedia("Food", "Product", createAsSubPage: true)]
    [LocDescription("VANILLA!")]
    public partial class VanillaExtractItem : FoodItem
    {

        public override float Calories => 100;

        public override Nutrients Nutrition => new Nutrients()

        {
            Carbs = 6,
            Fat = 2,
            Protein = 2,
            Vitamins = 3
        };

        protected override float BaseShelfLife => (float)TimeUtil.HoursToSeconds(72);


    }




    //Recipe


    [RequiresSkill(typeof(AdvancedCookingSkill), 4)]
    [Ecopedia("Food", "Product", subPageName: "Vanilla Extract Item")]
    public partial class VanillaExtractRecipe : RecipeFamily
    {
        public VanillaExtractRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "VanillaExtract",  //noloc
                displayName: Localizer.DoStr("Vanilla Extract"),

                ingredients: new List<IngredientElement>
                {
                    new IngredientElement(typeof(JarItem), 5, true),
                    new IngredientElement(typeof(JarLidItem), 5, true),
                    new IngredientElement(typeof(VanillaBeansItem), 20, typeof(AdvancedCookingSkill), typeof(AdvancedCookingLavishResourcesTalent)),
                    new IngredientElement(typeof(BottledLiquorItem), 2, true),
                },

                items: new List<CraftingElement>
                {
                    new CraftingElement<VanillaExtractItem>(5),
                    new CraftingElement<GlassBottleItem>(2),
                });

            this.Recipes = new List<Recipe> { recipe };

            this.ExperienceOnCraft = 1;

            this.LaborInCalories = CreateLaborInCaloriesValue(500, typeof(AdvancedCookingSkill));

            this.CraftMinutes = CreateCraftTimeValue(
                beneficiary: typeof(VanillaExtractRecipe),
                start: 30f,
                skillType: typeof(AdvancedCookingSkill), typeof(AdvancedCookingFocusedSpeedTalent), typeof(AdvancedCookingParallelSpeedTalent));

            this.ModsPreInitialize();

            this.Initialize(displayText: Localizer.DoStr("Vanilla Extract"), recipeType: typeof(VanillaExtractRecipe));

            this.ModsPostInitialize();

            CraftingComponent.AddRecipe(tableType: typeof(KitchenObject), recipe: this);

        }
        partial void ModsPreInitialize();
        partial void ModsPostInitialize();
    }
}
