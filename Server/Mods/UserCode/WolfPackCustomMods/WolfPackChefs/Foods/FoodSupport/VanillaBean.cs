// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from RecipeTemplate.tt/>

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Skills;
    using Eco.Shared.Utils;
    using Eco.Shared.Time;
    using Eco.Shared.Items;
    using Eco.World;
    using Eco.World.Blocks;
    using Gameplay.Systems.TextLinks;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Core.Controller;
    using Eco.Core.Items;
    using Eco.Gameplay.Settlements.ClaimStakes;
    using Eco.Gameplay.Items.Recipes;




    //FoodItem

    [Serialized]
    [LocDisplayName("Vanilla Beans")]
    [Weight(125)]
    [Yield(typeof(VanillaBeansItem), typeof(FarmingSkill), new float[] { 1f, 1.4f, 1.5f, 1.6f, 1.7f, 1.8f, 1.9f, 2.0f })]
    [Crop]
    [Tag("Crop")]
    [Tag("Harvestable")]
    [Tag("Vegetable")]
    [Tag("Raw Food")]
    [Ecopedia("Food", "Produce", createAsSubPage: true)]
    [LocDescription("A delicious Vanilla Beans grown in our custom crop greenhouse and hydroponics table.")]
    public partial class VanillaBeansItem : FoodItem
    {



        public override float Calories => 100;

        public override Nutrients Nutrition => new Nutrients() { Carbs = 4, Fat = 0, Protein = 0, Vitamins = 0 };


        protected override float BaseShelfLife => (float)TimeUtil.HoursToSeconds(96);
    }




    //Hydroponics Recipe

    [RequiresSkill(typeof(FarmingSkill), 1)]
    public partial class HydroVanillaBeansRecipe : RecipeFamily
    {
        public HydroVanillaBeansRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "HydroponicallyGrowVanillaBeans",  //noloc
                displayName: Localizer.DoStr("Hydroponically Grow Vanilla Beans"),


                ingredients: new List<IngredientElement>
                {
                    new IngredientElement(typeof(CompostFertilizerItem), 1, typeof(FarmingSkill), typeof(FarmingLavishResourcesTalent)),
                },


                items: new List<CraftingElement>
                {
                    new CraftingElement<VanillaBeansItem>(10),
                });
            this.Recipes = new List<Recipe> { recipe };
            this.ExperienceOnCraft = 1;


            this.LaborInCalories = CreateLaborInCaloriesValue(400, typeof(FarmingSkill));


            this.CraftMinutes = CreateCraftTimeValue(beneficiary: typeof(HydroVanillaBeansRecipe), start: 20f, skillType: typeof(FarmingSkill), typeof(FarmingFocusedSpeedTalent), typeof(FarmingParallelSpeedTalent));


            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Hydroponically Grow Vanilla Beans"), recipeType: typeof(HydroVanillaBeansRecipe));
            this.ModsPostInitialize();


            CraftingComponent.AddRecipe(tableType: typeof(CustomCropHydrotableObject), recipe: this);
        }



        partial void ModsPreInitialize();

        partial void ModsPostInitialize();
    }



    //Greenhouse Recipe

    [RequiresSkill(typeof(FarmingSkill), 1)]
    public partial class GrowVanillaBeansRecipe : RecipeFamily
    {
        public GrowVanillaBeansRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "GrowVanillaBeans",  //noloc
                displayName: Localizer.DoStr("Grow Vanilla Beans"),


                ingredients: new List<IngredientElement>
                {
                    new IngredientElement(typeof(CompostFertilizerItem), 1, typeof(FarmingSkill), typeof(FarmingLavishResourcesTalent)),
                },


                items: new List<CraftingElement>
                {
                    new CraftingElement<VanillaBeansItem>(40),
                });
            this.Recipes = new List<Recipe> { recipe };

            this.ExperienceOnCraft = 1;

            this.LaborInCalories = CreateLaborInCaloriesValue(400, typeof(FarmingSkill));


            this.CraftMinutes = CreateCraftTimeValue(beneficiary: typeof(GrowVanillaBeansRecipe), start: 20f, skillType: typeof(FarmingSkill), typeof(FarmingFocusedSpeedTalent), typeof(FarmingParallelSpeedTalent));


            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Grow Vanilla Beans"), recipeType: typeof(GrowVanillaBeansRecipe));
            this.ModsPostInitialize();


            CraftingComponent.AddRecipe(tableType: typeof(CustomCropGreenhouseObject), recipe: this);
        }


        partial void ModsPreInitialize();


        partial void ModsPostInitialize();
    }
}