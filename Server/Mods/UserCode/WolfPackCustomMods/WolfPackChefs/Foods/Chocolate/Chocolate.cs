// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from FoodTemplate.tt/>

namespace Eco.Mods.TechTree
{
    using Eco.Core.Items;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Players;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.Time;
    using System;
    using System.Collections.Generic;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Skills;
    using Eco.Shared.Items;
    using Eco.World;
    using Eco.World.Blocks;
    using Gameplay.Systems.TextLinks;
    using Eco.Core.Controller;
    using Eco.Gameplay.Settlements.ClaimStakes;
    using Eco.Gameplay.Items.Recipes;


    /// <summary>
    /// <para>
    /// Server side food Chocolate definition for the "Chocolate" Chocolate. 
    /// This object inherits the FoodChocolate base class to allow for consumption mechanics.
    /// </para>
    /// <para>More information about FoodChocolate objects can be found at https://docs.play.eco/api/server/eco.gameplay/Eco.Gameplay.Chocolates.FoodChocolate.html</para>
    /// </summary>
    /// <remarks>
    /// This is an auto-generated class. Don't modify it! All your changes will be wiped with next update! Use Mods* partial methods instead for customization. 
    /// If you wish to modify this class, please create a new partial class or follow the instructions in the "UserCode" folder to override the entire file.
    /// </remarks>
    [Serialized] // Tells the save/load system this object needs to be serialized. 
    [LocDisplayName("Bag of Chocolate")] // Defines the localized name of the Chocolate.
    [Weight(300)] // Defines how heavy the Chocolate is.

    [Ecopedia("Food", "Sweets", createAsSubPage: true)]
    [LocDescription("Chocolate ready to eat or be made into something else.")] //The tooltip description for the food Chocolate.
    public partial class ChocolateItem : FoodItem
    {


        /// <summary>The amount of calories awarded for eating the food Chocolate.</summary>
        public override float Calories => 0;
        /// <summary>The nutritional value of the food Chocolate.</summary>
        public override Nutrients Nutrition => new Nutrients() { Carbs = 0, Fat = 0, Protein = 0, Vitamins = 0 };

        /// <summary>Defines the default time it takes for this Chocolate to spoil. This value can be modified by the inventory this Chocolate currently resides in.</summary>
        protected override float BaseShelfLife => (float)TimeUtil.HoursToSeconds(72);
    }



    [RequiresSkill(typeof(CuttingEdgeCookingSkill), 1)]
    public partial class ChocolateRecipe : RecipeFamily
    {
        public ChocolateRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "Chocolate",  //noloc
                displayName: Localizer.DoStr("Chocolate"),

                // Defines the ingredients needed to craft this recipe. An ingredient Chocolates takes the following inputs
                // type of the Chocolate, the amount of the Chocolate, the skill required, and the talent used.
                ingredients: new List<IngredientElement>
                {
                    new IngredientElement(typeof(CacaoButterItem), 15, typeof(CuttingEdgeCookingSkill), typeof(CuttingEdgeCookingLavishResourcesTalent)),
                    new IngredientElement(typeof(CacaoPowderItem), 15, typeof(CuttingEdgeCookingSkill), typeof(CuttingEdgeCookingLavishResourcesTalent)),
                    new IngredientElement(typeof(PowderedMilkItem), 5, typeof(CuttingEdgeCookingSkill), typeof(CuttingEdgeCookingLavishResourcesTalent)),
                    new IngredientElement(typeof(PowderedSugarItem), 20, typeof(CuttingEdgeCookingSkill), typeof(CuttingEdgeCookingLavishResourcesTalent)),
                    new IngredientElement(typeof(SaltItem), 2, typeof(CuttingEdgeCookingSkill), typeof(CuttingEdgeCookingLavishResourcesTalent)),
                    new IngredientElement(typeof(PlasticPackagingItem), 10, true),

                },

                // Define our recipe output Chocolates.
                // For every output Chocolate there needs to be one CraftingElement entry with the type of the final Chocolate and the amount
                // to create.
                items: new List<CraftingElement>
                {
                    new CraftingElement<ChocolateItem>(10),
                });
            this.Recipes = new List<Recipe> { recipe };
            this.ExperienceOnCraft = 1; // Defines how much experience is gained when crafted.

            // Defines the amount of labor required and the required skill to add labor
            this.LaborInCalories = CreateLaborInCaloriesValue(500, typeof(CuttingEdgeCookingSkill));

            // Defines our crafting time for the recipe
            this.CraftMinutes = CreateCraftTimeValue(beneficiary: typeof(ChocolateRecipe), start: 5f, skillType: typeof(CuttingEdgeCookingSkill), typeof(CuttingEdgeCookingFocusedSpeedTalent), typeof(CuttingEdgeCookingParallelSpeedTalent));

            // Perform pre/post initialization for user mods and initialize our recipe instance with the display name "Chocolate"
            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Chocolate"), recipeType: typeof(ChocolateRecipe));
            this.ModsPostInitialize();

            // Register our RecipeFamily instance with the crafting system so it can be crafted.
            CraftingComponent.AddRecipe(tableType: typeof(StoveObject), recipe: this);
        }

        /// <summary>Hook for mods to customize RecipeFamily before initialization. You can change recipes, xp, labor, time here.</summary>
        partial void ModsPreInitialize();

        /// <summary>Hook for mods to customize RecipeFamily after initialization, but before registration. You can change skill requirements here.</summary>
        partial void ModsPostInitialize();
    }



}
