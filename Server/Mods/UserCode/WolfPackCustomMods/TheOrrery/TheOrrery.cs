// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from WorldObjectTemplate.tt />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Interactions.Interactors;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Occupancy;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Gameplay.Pipes.LiquidComponents;
    using Eco.Gameplay.Pipes.Gases;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Shared.Networking;
    using Eco.Gameplay.Pipes;
    using Eco.World.Blocks;
    using Eco.Gameplay.Housing.PropertyValues;
    using Eco.Gameplay.Civics.Objects;
    using Eco.Gameplay.Settlements;
    using Eco.Gameplay.Systems.NewTooltip;
    using Eco.Core.Controller;
    using Eco.Core.Utils;
    using Eco.Gameplay.Components.Storage;
    using static Eco.Gameplay.Housing.PropertyValues.HomeFurnishingValue;
    using static Eco.Gameplay.Components.PartsComponent;
    using Eco.Gameplay.Items.Recipes;
    using Eco.Shared.SharedTypes;
    using Eco.Gameplay.Civics.GameValues;



    //Client-Side Interaction Parameter Names

    public partial class ClientSideInteractionParameterNames
    {
        //--------------CLIENT-ONLY KEYS-------------------  These can be used on the InteractionDefinitions defined on the server.
        public const string TargetingTheOrreryButton = "TheOrreryButton";

    }



    //Object


    [Serialized]
    [RequireComponent(typeof(OnOffComponent))]    
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(HousingComponent))]
    [RequireComponent(typeof(OccupancyRequirementComponent))]
    [RequireComponent(typeof(PowerGridComponent))]
    [RequireComponent(typeof(PowerConsumptionComponent))]
    [RequireComponent(typeof(ForSaleComponent))]
    [RequireComponent(typeof(PartsComponent))]
    [Tag("Usable")]
    [Ecopedia("Housing Objects", "Outdoor", subPageName: "The Orrery Item")]
    [RepairRequiresSkill(typeof(MechanicsSkill), 2)]
    [RepairRequiresSkill(typeof(SelfImprovementSkill), 5)]
    public partial class TheOrreryObject : WorldObject, IRepresentsItem, IHasInteractions
    {
        private OnOffComponent switchComponent;
        
        

        public virtual Type RepresentedItemType => typeof(TheOrreryItem);
        public override LocString DisplayName => Localizer.DoStr("The Orrery");
        public override TableTextureMode TableTexture => TableTextureMode.Stone;

        static TheOrreryObject()
        {

            WorldObject.AddOccupancy<TheOrreryObject>(new List<BlockOccupancy>(){
            new BlockOccupancy(new Vector3i(0, 0, 0)),
            new BlockOccupancy(new Vector3i(1, 0, 0)),
            new BlockOccupancy(new Vector3i(0, 0, 1)),
            new BlockOccupancy(new Vector3i(1, 0, 1)),

            new BlockOccupancy(new Vector3i(0, 1, 0)),
            new BlockOccupancy(new Vector3i(1, 1, 0)),
            new BlockOccupancy(new Vector3i(0, 1, 1)),
            new BlockOccupancy(new Vector3i(1, 1, 1)),

            new BlockOccupancy(new Vector3i(0, 2, 0)),
            new BlockOccupancy(new Vector3i(1, 2, 0)),
            new BlockOccupancy(new Vector3i(0, 2, 1)),
            new BlockOccupancy(new Vector3i(1, 2, 1)),

            new BlockOccupancy(new Vector3i(0, 3, 0)),
            new BlockOccupancy(new Vector3i(1, 3, 0)),
            new BlockOccupancy(new Vector3i(0, 3, 1)),
            new BlockOccupancy(new Vector3i(1, 3, 1)),
            });
        }

        class TheOrreryMessagesContainer : OnOffComponent.IOnOffMessagesContainer
        {
            public LocString TurnOnMessage => Localizer.DoStr("Off");
            public LocString TurnOffMessage => Localizer.DoStr("On");
            public LocString TurnedOnMessage => Localizer.DoStr("Off");
            public LocString TurnedOffMessage => Localizer.DoStr("On");
            public LocString NotAuthedMessage => Localizer.DoStr("You are not authorized to On/Off this TheOrrery.");
            public LocString InvalidStatusMessage => Localizer.DoStr("This Orrery has an invalid status and cannot ineract.");
        }

        static TheOrreryMessagesContainer msgContainer = new TheOrreryMessagesContainer();
        

        protected override void Initialize()
        {
            
            this.ModsPreInitialize();
            switchComponent = this.GetComponent<OnOffComponent>();
            switchComponent.Setup(null, AccessType.ConsumerAccess, true, msgContainer);                      
            this.GetComponent<HousingComponent>().HomeValue = TheOrreryItem.homeValue;
            this.GetComponent<PowerConsumptionComponent>().Initialize(100);           
            this.GetComponent<PowerGridComponent>().Initialize(10, new ElectricPower());
            this.ModsPostInitialize();
                    {
                this.GetComponent<PartsComponent>().Config(() => LocString.Empty, new PartInfo[]
                                    {
                                        new() { TypeName = nameof(LightBulbItem), Quantity = 1},
                                        new() { TypeName = nameof(LubricantItem), Quantity = 1},
                                    });
                this.GetComponent<PowerGridComponent>().DurabilityUsedPerHourOfUse = .01f;
            }
        }


        [Interaction(InteractionTrigger.RightClick, "Activation", requiredEnvVars: new[] { ClientSideInteractionParameterNames.TargetingTheOrreryButton }, MinCaloriesRequired = 0)]
        public void Toggle(Player player, InteractionTriggerInfo trigger, InteractionTarget target)
        {

            if (target.ContainsParameter("TheOrreryButton"))
            {
                this.switchComponent.SwitchState(player);
            }
        }

      





        partial void ModsPreInitialize();
     
        partial void ModsPostInitialize();

        
    }





    //Item


    [Serialized]
    [LocDisplayName("The Orrery")]
    [LocDescription("The Orrery is a mechanical model of the Solar System that shows the relative positions and motions of the planets and moons according to the heliocentric (Sun-centred) model.")]
    [Ecopedia("Housing Objects", "Outdoor", createAsSubPage: true)]
    [Tag("Housing")]
    [Weight(5000)]
    public partial class TheOrreryItem : WorldObjectItem<TheOrreryObject>
    {
        
        protected override OccupancyContext GetOccupancyContext => new SideAttachedContext(DirectionAxisFlags.Down, WorldObject.GetOccupancyInfo(this.WorldObjectType));

        
        public override HomeFurnishingValue HomeValue => homeValue;
        public static readonly HomeFurnishingValue homeValue = new HomeFurnishingValue()
                {
                    ObjectName = typeof(TheOrreryObject).UILink(),
                    Category = HousingConfig.GetRoomCategory("Outdoor"),
                    BaseValue = 9,
                    TypeForRoomLimit = Localizer.DoStr("TheOrrery"),
                    DiminishingReturnMultiplier = 0.01f
                };

        [NewTooltip(CacheAs.SubType, 7)] public static LocString PowerConsumptionTooltip() => Localizer.Do($"Consumes: {Text.Info(100)}w of {new ElectricPower().Name} power.");
        [Serialized, SyncToView, NewTooltipChildren(CacheAs.Instance, flags: TTFlags.AllowNonControllerTypeForChildren)] public object PersistentData { get; set; }
        
    }









    //Recipe


    [RequiresModule(typeof(ShaperObject))]
    [RequiresSkill(typeof(MechanicsSkill), 4)]
    [Ecopedia("Housing Objects", "Outdoor", subPageName: "The Orrery Item")]
    public partial class TheOrreryRecipe : RecipeFamily
    {
        public TheOrreryRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "TheOrrery",  //noloc
                displayName: Localizer.DoStr("The Orrery"),

                
                ingredients: new List<IngredientElement>
                {
                    new IngredientElement(typeof(IronBarItem), 24, typeof(MechanicsSkill), typeof(MechanicsLavishResourcesTalent)),
                    new IngredientElement(typeof(IronPipeItem), 30, typeof(MechanicsSkill), typeof(MechanicsLavishResourcesTalent)),
                    new IngredientElement(typeof(IronGearItem), 42, true),
                    new IngredientElement(typeof(LubricantItem), 2, typeof(MechanicsSkill), typeof(MechanicsLavishResourcesTalent)),
                    new IngredientElement(typeof(GlassItem), 15, typeof(MechanicsSkill), typeof(MechanicsLavishResourcesTalent)),
                    new IngredientElement(typeof(OilPaintItem), 10, typeof(MechanicsSkill), typeof(MechanicsLavishResourcesTalent)),
                    new IngredientElement(typeof(LightBulbItem), 10, true),
                    new IngredientElement(typeof(CopperWiringItem), 10, typeof(MechanicsSkill), typeof(MechanicsLavishResourcesTalent)),
                    new IngredientElement(typeof(BasaltItem), 24, typeof(MechanicsSkill), typeof(MechanicsLavishResourcesTalent)),
                },

                
                items: new List<CraftingElement>
                {
                    new CraftingElement<TheOrreryItem>()
                });
            this.Recipes = new List<Recipe> { recipe };

            this.ExperienceOnCraft = 2; 

            this.LaborInCalories = CreateLaborInCaloriesValue(900, typeof(MechanicsSkill));

            
            this.CraftMinutes = CreateCraftTimeValue(beneficiary: typeof(TheOrreryRecipe), start: 10f, skillType: typeof(MechanicsSkill), typeof(MechanicsFocusedSpeedTalent), typeof(MechanicsParallelSpeedTalent));

           
            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("The Orrery"), recipeType: typeof(TheOrreryRecipe));
            this.ModsPostInitialize();

            
            CraftingComponent.AddRecipe(tableType: typeof(MachinistTableObject), recipe: this);
        }

        
        partial void ModsPreInitialize();

       
        partial void ModsPostInitialize();
    }
}
