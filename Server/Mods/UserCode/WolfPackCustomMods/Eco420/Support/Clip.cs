// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from FoodTemplate.tt/>

namespace Eco.Mods.TechTree
{
    using System.Collections.Generic;
    using Eco.Core.Items;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Core.Controller;
    using Eco.Gameplay.Items.Recipes;
    using Eco.Gameplay.DynamicValues;




    //Item


    [Serialized]
    [LocDisplayName("Clip")]
    [Weight(50)]
    [MaxStackSize(420)]
    [LocDescription("A small clip for securing stuff.")]
    public partial class ClipItem : PartItem
    {
        public override IDynamicValue SkilledRepairCost => skilledRepairCost;
        private static IDynamicValue skilledRepairCost = new ConstantValue(1);


        public override LocString DisplayNamePlural { get { return Localizer.DoStr("Clips"); } }
        public float ReducesMaxDurabilityByPercent => 0.005f;


    }



    //Recipe

        
    [RequiresSkill(typeof(CarpentrySkill), 4)]
    public partial class ClipRecipe : RecipeFamily
    {
        public ClipRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "Clip",  //noloc
                displayName: Localizer.DoStr("Clip"),


                ingredients: new List<IngredientElement>
                {
                    new IngredientElement(typeof(IronSpringItem), 1, typeof(CarpentrySkill), typeof(CarpentryLavishResourcesTalent)),
                    new IngredientElement("WoodBoard", 2, typeof(CarpentrySkill), typeof(CarpentryLavishResourcesTalent)),
                    
                },

                items: new List<CraftingElement>
                {
                    new CraftingElement<ClipItem>(2)
                });
            this.Recipes = new List<Recipe> { recipe };

            this.ExperienceOnCraft = 1f;

            this.LaborInCalories = CreateLaborInCaloriesValue(420);


            this.CraftMinutes = CreateCraftTimeValue(beneficiary: typeof(ClipRecipe), start: 1f, skillType: typeof(CarpentrySkill), typeof(CarpentryFocusedSpeedTalent), typeof(CarpentryParallelSpeedTalent));


            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Clip"), recipeType: typeof(ClipRecipe));
            this.ModsPostInitialize();


            CraftingComponent.AddRecipe(tableType: typeof(CarpentryTableObject), recipe: this);
        }

        partial void ModsPreInitialize();

        partial void ModsPostInitialize();

    }
}