// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from ItemTemplate.tt/>

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Settlements;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Core.Items;
    using Eco.World;
    using Eco.World.Blocks;
    using Eco.Gameplay.Pipes;
    using Eco.Core.Controller;
    using Eco.Gameplay.Items.Recipes;







    //Item


    [Serialized]
    [LocDisplayName("Hemp Fabric")]
    [Weight(100)]
    [MaxStackSize(420)]
    [Tag("Currency")]
    [Currency]
    [Ecopedia("Items", "Products", createAsSubPage: true)]
    [Tag("Fabric")]
    [LocDescription("A rough Hemp fabric that covers your basic needs.")]
    public partial class HempFabricItem : PartItem
    {
        public override IDynamicValue SkilledRepairCost => skilledRepairCost;
        private static IDynamicValue skilledRepairCost = new ConstantValue(1);


        public override LocString DisplayNamePlural { get { return Localizer.DoStr("Hemp Fabric"); } }
        public float ReduceMaxDurabilityByPercent => 0.05f;

    }





    //Recipe1


    [RequiresSkill(typeof(TailoringSkill), 2)]
    [Ecopedia("Items", "Products", subPageName: "Hemp Fabric Item")]
    public partial class HempFabricRecipe : RecipeFamily
    {
        public HempFabricRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "HempFabric",  //noloc
                displayName: Localizer.DoStr("Hemp Fabric"),

               
                ingredients: new List<IngredientElement>
                {
                    new IngredientElement(typeof(HempYarnItem), 4, typeof(TailoringSkill), typeof(TailoringLavishResourcesTalent)),
                },

                
                items: new List<CraftingElement>
                {
                    new CraftingElement<HempFabricItem>(1)
                });
            this.Recipes = new List<Recipe> { recipe };
            this.ExperienceOnCraft = 0.5f; 
            
         
            this.LaborInCalories = CreateLaborInCaloriesValue(100, typeof(TailoringSkill));

            
            this.CraftMinutes = CreateCraftTimeValue(beneficiary: typeof(HempFabricRecipe), start: 1, skillType: typeof(TailoringSkill), typeof(TailoringFocusedSpeedTalent), typeof(TailoringParallelSpeedTalent));

          
            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Hemp Fabric"), recipeType: typeof(HempFabricRecipe));
            this.ModsPostInitialize();

            
            CraftingComponent.AddRecipe(tableType: typeof(LoomObject), recipe: this);
        }

        
        partial void ModsPreInitialize();

        
        partial void ModsPostInitialize();
    }




    //recipe 2


    [RequiresSkill(typeof(TailoringSkill), 1)]
    public partial class WeaveHempFabricRecipe : RecipeFamily
    {
        public WeaveHempFabricRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "WeaveHempFabric",  //noloc
                displayName: Localizer.DoStr("Weave Hemp Fabric"),

                
                ingredients: new List<IngredientElement>
                {
                    new IngredientElement(typeof(HempYarnItem), 4, typeof(TailoringSkill), typeof(TailoringLavishResourcesTalent)),
                },

                
                items: new List<CraftingElement>
                {
                    new CraftingElement<HempFabricItem>(2),
                });
            this.Recipes = new List<Recipe> { recipe };
            this.ExperienceOnCraft = 0.5f; 

            
            this.LaborInCalories = CreateLaborInCaloriesValue(80, typeof(TailoringSkill));

            
            this.CraftMinutes = CreateCraftTimeValue(beneficiary: typeof(WeaveHempFabricRecipe), start: 1, skillType: typeof(TailoringSkill), typeof(TailoringFocusedSpeedTalent), typeof(TailoringParallelSpeedTalent));

            
            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Weave Hemp Fabric"), recipeType: typeof(WeaveHempFabricRecipe));
            this.ModsPostInitialize();

           
            CraftingComponent.AddRecipe(tableType: typeof(AutomaticLoomObject), recipe: this);
        }

        
        partial void ModsPreInitialize();

        
        partial void ModsPostInitialize();
    }
}