// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from WorldObjectTemplate.tt />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;    
    using Eco.Gameplay.Interactions.Interactors;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Occupancy;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Shared.Networking;
    using Eco.World.Blocks;
    using Eco.Gameplay.Housing.PropertyValues;
    using Eco.Gameplay.Civics.Objects;
    using Eco.Gameplay.Settlements;
    using Eco.Gameplay.Systems.NewTooltip;
    using Eco.Core.Controller;
    using Eco.Core.Utils;
    using Eco.Gameplay.Components.Storage;


    using Eco.Gameplay.Items.Recipes;
    using System.Linq;
    using static Eco.Gameplay.Components.PartsComponent;
    using Eco.Gameplay.Auth;
    using Eco.Gameplay.GameActions;   
    using Eco.Shared.IoC;
    using Eco.Shared.SharedTypes;
    using Eco.Gameplay.Components.Store;
    using Eco.Gameplay.Systems.EnvVars;
    using Eco.Gameplay.Wires;





    //Object


    [Serialized]
    [RequireComponent(typeof(OnOffComponent))]
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(LinkComponent))]
    [RequireComponent(typeof(PowerGridComponent))]
    [RequireComponent(typeof(PowerConsumptionComponent))]
    [RequireComponent(typeof(CraftingComponent))]
    [RequireComponent(typeof(PartsComponent))]
    [RequireComponent(typeof(OccupancyRequirementComponent))]
    [RequireComponent(typeof(PluginModulesComponent))]
    [RequireComponent(typeof(PublicStorageComponent))]
    [RequireComponent(typeof(ForSaleComponent))]
    [RequireComponent(typeof(RoomRequirementsComponent))]
    [RequireRoomContainment]
    [RequireRoomVolume(30)]
    [RequireRoomMaterialTier(.8f, typeof(SelfImprovementLavishReqTalent), typeof(SelfImprovementFrugalReqTalent))]
    [RepairRequiresSkill(typeof(BlacksmithSkill), 2)]
    [RepairRequiresSkill(typeof(SelfImprovementSkill), 5)]
    [Tag("Usable")]
    public partial class CannabisWorkbenchObject : WorldObject, IRepresentsItem, IHasInteractions
    {        
        private OnOffComponent onOffComponent;   

        public virtual Type RepresentedItemType => typeof(CannabisWorkbenchItem);
        public override LocString DisplayName => Localizer.DoStr("Cannabis Workbench");
        public override TableTextureMode TableTexture => TableTextureMode.Wood;
                
        static CannabisWorkbenchObject()
        {

            WorldObject.AddOccupancy<CannabisWorkbenchObject>(new List<BlockOccupancy>(){
            new BlockOccupancy(new Vector3i(0, 0, 0)),
            new BlockOccupancy(new Vector3i(1, 0, 0)),
            new BlockOccupancy(new Vector3i(0, 0, 1)),
            new BlockOccupancy(new Vector3i(1, 0, 1)),
            new BlockOccupancy(new Vector3i(-1, 0, 0)),
            new BlockOccupancy(new Vector3i(-1, 0, 1)),

            new BlockOccupancy(new Vector3i(0, 1, 0)),
            new BlockOccupancy(new Vector3i(1, 1, 0)),
            new BlockOccupancy(new Vector3i(0, 1, 1)),
            new BlockOccupancy(new Vector3i(1, 1, 1)),
            new BlockOccupancy(new Vector3i(-1, 1, 0)),
            new BlockOccupancy(new Vector3i(-1, 1, 1)),

            new BlockOccupancy(new Vector3i(0, 2, 0)),
            new BlockOccupancy(new Vector3i(1, 2, 0)),
            new BlockOccupancy(new Vector3i(0, 2, 1)),
            new BlockOccupancy(new Vector3i(1, 2, 1)),
            new BlockOccupancy(new Vector3i(-1, 2, 0)),
            new BlockOccupancy(new Vector3i(-1, 2, 1)),
            });
        }              

        protected override void Initialize()
        {
            this.ModsPreInitialize();
            onOffComponent = this.GetComponent<OnOffComponent>();
            this.GetComponent<PowerGridComponent>().Initialize(10, new ElectricPower());
            this.GetComponent<PowerConsumptionComponent>();
            this.GetComponent<LinkComponent>().Initialize(15);
            PublicStorageComponent component = base.GetComponent<PublicStorageComponent>(null);            
            component.Initialize(32);             
            component.Storage.AddInvRestriction(new NotCarriedRestriction());
            component.Storage.AddInvRestriction(new StackLimitRestriction(420));

            
            this.ModsPostInitialize();

            {
                this.GetComponent<PartsComponent>().Config(() => LocString.Empty, new PartInfo[]
                                    {
                                        new() { TypeName = nameof(LightBulbItem), Quantity = 1},
                                        new() { TypeName = nameof(ClipItem), Quantity = 2},
                                    });
                this.GetComponent<PowerGridComponent>().DurabilityUsedPerHourOfUse = .01f;
            }

        }     

       
        [Interaction(InteractionTrigger.RightClick, "Light Switch", MinCaloriesRequired = 0)]
        public void Toggle(Player player, InteractionTriggerInfo trigger, InteractionTarget target)
        {
            
            if (target.ContainsParameter("LightSwitch"))
            {
                this.onOffComponent.SwitchState(player);
                
                
            }
        }
        public override void Tick()
        {
            base.Tick();

            float power = 0f;
            if (this.onOffComponent.On)

                power += 60f;

            this.GetComponent<PowerConsumptionComponent>().Initialize(power);

        }


        partial void ModsPreInitialize();

        partial void ModsPostInitialize();       

    }






    //Item


    [Serialized]
    [LocDisplayName("Cannabis Workbench")]
    [LocDescription("A workbench for all your cannabis needs.")]    
    [Tag("Crafting Table")]
    [Tag("Cannabis")]
    [Weight(2000)]
    [MaxStackSize(420)]
    [AllowPluginModules(Tags = new[] { "BasicUpgrade" }, ItemTypes = new[] { typeof(SurvivalistUpgradeItem) })]//noloc
    public partial class CannabisWorkbenchItem : WorldObjectItem<CannabisWorkbenchObject>, IPersistentData
    {
        protected override OccupancyContext GetOccupancyContext => new SideAttachedContext(0 | DirectionAxisFlags.Down, WorldObject.GetOccupancyInfo(this.WorldObjectType));



        [Serialized, SyncToView, NewTooltipChildren(CacheAs.Instance, flags: TTFlags.AllowNonControllerTypeForChildren)] public object PersistentData { get; set; }
    }





    //Recipe

    [RequiresModule(typeof(AnvilObject))]
    [RequiresSkill(typeof(BlacksmithSkill), 4)]
    
    public partial class CannabisWorkbenchRecipe : RecipeFamily
    {
        public CannabisWorkbenchRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "CannabisWorkbench",  //noloc
                displayName: Localizer.DoStr("Cannabis Workbench"),

              
                ingredients: new List<IngredientElement>
                {
                    new IngredientElement("Lumber", 20, typeof(BlacksmithSkill), typeof(BlacksmithLavishResourcesTalent)),
                    new IngredientElement("WoodBoard", 20, typeof(BlacksmithSkill), typeof(BlacksmithLavishResourcesTalent)),
                    new IngredientElement(typeof(IronBarItem), 20, typeof(BlacksmithSkill), typeof(BlacksmithLavishResourcesTalent)),                    
                    new IngredientElement(typeof(IronPlateItem), 10, typeof(BlacksmithSkill), typeof(BlacksmithLavishResourcesTalent)),
                    new IngredientElement(typeof(ScrewsItem), 30, typeof(BlacksmithSkill), typeof(BlacksmithLavishResourcesTalent)),
                    new IngredientElement(typeof(ClipItem), 5, true),
                    new IngredientElement(typeof(LightBulbItem), 1, true),
                    new IngredientElement(typeof(CopperWiringItem), 5, typeof(BlacksmithSkill), typeof(BlacksmithLavishResourcesTalent)),
                    new IngredientElement(typeof(PrintingSuppliesItem), 2, typeof(BlacksmithSkill), typeof(BlacksmithLavishResourcesTalent)),
                    new IngredientElement(typeof(MagicItem), 23, typeof(BlacksmithSkill), typeof(BlacksmithLavishResourcesTalent)),
                },

               
                items: new List<CraftingElement>
                {
                    new CraftingElement<CannabisWorkbenchItem>()
                });
            this.Recipes = new List<Recipe> { recipe };

            this.ExperienceOnCraft = 2;

            this.LaborInCalories = CreateLaborInCaloriesValue(420);

          
            this.CraftMinutes = CreateCraftTimeValue(
                beneficiary: typeof(CannabisWorkbenchRecipe), 
                start: 10f, 
                skillType: typeof(BlacksmithSkill), typeof(BlacksmithFocusedSpeedTalent), typeof(BlacksmithParallelSpeedTalent));

            
            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Cannabis Workbench"), recipeType: typeof(CannabisWorkbenchRecipe));
            this.ModsPostInitialize();

           
            CraftingComponent.AddRecipe(tableType: typeof(BlacksmithTableObject), recipe: this);
        }

        
        partial void ModsPreInitialize();

       
        partial void ModsPostInitialize();
    }
}
