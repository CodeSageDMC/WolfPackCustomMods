// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from WorldObjectTemplate.tt />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;    
    using Eco.Gameplay.Interactions.Interactors;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Occupancy;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Shared.Networking;
    using Eco.World.Blocks;
    using Eco.Gameplay.Housing.PropertyValues;
    using Eco.Gameplay.Civics.Objects;
    using Eco.Gameplay.Settlements;
    using Eco.Gameplay.Systems.NewTooltip;
    using Eco.Core.Controller;
    using Eco.Core.Utils;
    using Eco.Gameplay.Components.Storage;
    using Eco.Gameplay.Items.Recipes;
    using System.Linq;
    using static Eco.Gameplay.Components.PartsComponent;
    using Eco.Gameplay.Auth;
    using Eco.Gameplay.GameActions;   
    using Eco.Shared.IoC;
    using Eco.Shared.SharedTypes;
    using Eco.Gameplay.Components.Store;
    using Eco.Gameplay.Systems.EnvVars;





    //Object


    [Serialized]
    [RequireComponent(typeof(OnOffComponent))]
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(LinkComponent))]
    [RequireComponent(typeof(PowerGridComponent))]
    [RequireComponent(typeof(PowerConsumptionComponent))]
    [RequireComponent(typeof(CraftingComponent))]
    [RequireComponent(typeof(PartsComponent))]
    [RequireComponent(typeof(OccupancyRequirementComponent))]
    [RequireComponent(typeof(PluginModulesComponent))]    
    [RequireComponent(typeof(ForSaleComponent))]
    [RequireComponent(typeof(RoomRequirementsComponent))]
    [RequireRoomContainment]
    [RequireRoomVolume(30)]
    [RequireRoomMaterialTier(.8f, typeof(SelfImprovementLavishReqTalent), typeof(SelfImprovementFrugalReqTalent))]
    [RepairRequiresSkill(typeof(CarpentrySkill), 2)]
    [RepairRequiresSkill(typeof(SelfImprovementSkill), 5)]
    [Tag("Usable")]
    public partial class CannabisGrowBoxObject : WorldObject, IRepresentsItem
    {

           
        
        public virtual Type RepresentedItemType => typeof(CannabisGrowBoxItem);
        public override LocString DisplayName => Localizer.DoStr("Cannabis Grow-Box");
        public override TableTextureMode TableTexture => TableTextureMode.Wood;
                
        static CannabisGrowBoxObject()
        {
            WorldObject.AddOccupancy<CannabisGrowBoxObject>(new List<BlockOccupancy>(){
            new BlockOccupancy(new Vector3i(0, 0, 0)),
            new BlockOccupancy(new Vector3i(1, 0, 0)),   
            
            new BlockOccupancy(new Vector3i(0, 1, 0)),
            new BlockOccupancy(new Vector3i(1, 1, 0)),

            new BlockOccupancy(new Vector3i(0, 2, 0)),
            new BlockOccupancy(new Vector3i(1, 2, 0)),
            });
        }              

        protected override void Initialize()
        {
            this.ModsPreInitialize();            
            this.GetComponent<PowerGridComponent>().Initialize(10, new ElectricPower());
            this.GetComponent<PowerConsumptionComponent>().Initialize(200);
            this.GetComponent<LinkComponent>().Initialize(15);
           

            
            this.ModsPostInitialize();

            {
                this.GetComponent<PartsComponent>().Config(() => LocString.Empty, new PartInfo[]
                                    {
                                        new() { TypeName = nameof(HeatLampBulbItem), Quantity = 2},
                                        
                                    });
                this.GetComponent<PowerGridComponent>().DurabilityUsedPerHourOfUse = .05f;
            }

        }

       
       

        partial void ModsPreInitialize();

        partial void ModsPostInitialize();       

    }






    //Item


    [Serialized]
    [LocDisplayName("Cannabis Grow-Box")]
    [LocDescription("That special indoor setup for growing cannabis.")]    
    [Tag("Crafting Table")]
    [Tag("Cannabis")]
    [Weight(2000)]
    [MaxStackSize(420)]
    [AllowPluginModules(Tags = new[] { "BasicUpgrade" }, ItemTypes = new[] { typeof(SurvivalistUpgradeItem), typeof(FarmingUpgradeItem)})]//noloc
    public partial class CannabisGrowBoxItem : WorldObjectItem<CannabisGrowBoxObject>, IPersistentData
    {
        protected override OccupancyContext GetOccupancyContext => new SideAttachedContext(DirectionAxisFlags.Down, WorldObject.GetOccupancyInfo(this.WorldObjectType));



        [Serialized, SyncToView, NewTooltipChildren(CacheAs.Instance, flags: TTFlags.AllowNonControllerTypeForChildren)] public object PersistentData { get; set; }
    }





    //Recipe

    [RequiresModule(typeof(CarpentryTableObject))]
    [RequiresSkill(typeof(CarpentrySkill), 4)]
    
    public partial class CannabisGrowBoxRecipe : RecipeFamily
    {
        public CannabisGrowBoxRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "CannabisGrowBox",  //noloc
                displayName: Localizer.DoStr("Cannabis Grow-Box"),

              
                ingredients: new List<IngredientElement>
                {
                    new IngredientElement("Lumber", 25, typeof(CarpentrySkill), typeof(CarpentryLavishResourcesTalent)),
                    new IngredientElement("WoodBoard", 15, typeof(CarpentrySkill), typeof(CarpentryLavishResourcesTalent)),
                    new IngredientElement(typeof(NailItem), 15, typeof(CarpentrySkill), typeof(CarpentryLavishResourcesTalent)),
                    new IngredientElement(typeof(CopperPlateItem), 5, typeof(CarpentrySkill), typeof(CarpentryLavishResourcesTalent)),
                    new IngredientElement(typeof(IronPlateItem), 2, typeof(CarpentrySkill), typeof(CarpentryLavishResourcesTalent)),
                    new IngredientElement(typeof(ScrewsItem), 10, typeof(CarpentrySkill), typeof(CarpentryLavishResourcesTalent)),
                    new IngredientElement(typeof(HeatLampBulbItem), 2, true),
                    new IngredientElement(typeof(GrowBoxFanItem), 2, true),
                    new IngredientElement(typeof(CopperWiringItem), 15, typeof(CarpentrySkill), typeof(CarpentryLavishResourcesTalent)), 
                    new IngredientElement(typeof(MagicItem), 23, typeof(CarpentrySkill), typeof(CarpentryLavishResourcesTalent)),
                },

               
                items: new List<CraftingElement>
                {
                    new CraftingElement<CannabisGrowBoxItem>()
                });
            this.Recipes = new List<Recipe> { recipe };

            this.ExperienceOnCraft = 2;

            this.LaborInCalories = CreateLaborInCaloriesValue(420);

          
            this.CraftMinutes = CreateCraftTimeValue(
                beneficiary: typeof(CannabisGrowBoxRecipe), 
                start: 8f, 
                skillType: typeof(CarpentrySkill), typeof(CarpentryFocusedSpeedTalent), typeof(CarpentryParallelSpeedTalent));

            
            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Cannabis Grow-Box"), recipeType: typeof(CannabisGrowBoxRecipe));
            this.ModsPostInitialize();

           
            CraftingComponent.AddRecipe(tableType: typeof(SawmillObject), recipe: this);
        }

        
        partial void ModsPreInitialize();

       
        partial void ModsPostInitialize();
    }
}
