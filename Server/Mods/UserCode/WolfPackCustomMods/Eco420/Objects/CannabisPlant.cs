// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from WorldObjectTemplate.tt />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Occupancy;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.Time;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Shared.Networking;
    using Eco.World.Blocks;
    using Eco.Gameplay.Housing.PropertyValues;
    using Eco.Gameplay.Civics.Objects;
    using Eco.Gameplay.Settlements;
    using Eco.Gameplay.Systems.NewTooltip;
    using Eco.Core.Controller;
    using Eco.Core.Utils;
    using Eco.Gameplay.Components.Storage;


    using Eco.Gameplay.Items.Recipes;





    //Object


    [Serialized]
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(OccupancyRequirementComponent))]
    [RequireComponent(typeof(HousingComponent))]
    [RequireComponent(typeof(ForSaleComponent))]
    [Tag("Usable")]
        public partial class CannabisPlantObject : WorldObject, IRepresentsItem
    {
        public virtual Type RepresentedItemType => typeof(CannabisPlantItem);
        public override LocString DisplayName => Localizer.DoStr("Cannabis Plant");
        public override TableTextureMode TableTexture => TableTextureMode.Brick;

        static CannabisPlantObject()
        {

            WorldObject.AddOccupancy<CannabisPlantObject>(new List<BlockOccupancy>(){
            new BlockOccupancy(new Vector3i(0, 0, 0)),
            new BlockOccupancy(new Vector3i(1, 0, 0)),
            new BlockOccupancy(new Vector3i(0, 0, 1)),
            new BlockOccupancy(new Vector3i(1, 0, 1)),

            new BlockOccupancy(new Vector3i(0, 1, 0)),
            new BlockOccupancy(new Vector3i(1, 1, 0)),
            new BlockOccupancy(new Vector3i(0, 1, 1)),
            new BlockOccupancy(new Vector3i(1, 1, 1)),

            new BlockOccupancy(new Vector3i(0, 2, 0)),
            new BlockOccupancy(new Vector3i(1, 2, 0)),
            new BlockOccupancy(new Vector3i(0, 2, 1)),
            new BlockOccupancy(new Vector3i(1, 2, 1)),
            });
        }


        protected override void Initialize()
        {
            this.ModsPreInitialize();
            this.GetComponent<HousingComponent>().HomeValue = CannabisPlantItem.homeValue;
            this.ModsPostInitialize();
        }


        

        partial void ModsPreInitialize();

        partial void ModsPostInitialize();
    }








    //Item


    [Serialized]
    [LocDisplayName("Cannabis Plant")]
    [LocDescription("A cannabis plant in bloom.")]
    [Tag("Cannabis")]
    [Weight(420)]
    [MaxStackSize(420)]
    public partial class CannabisPlantItem : WorldObjectItem<CannabisPlantObject>
    {
        protected override OccupancyContext GetOccupancyContext => new SideAttachedContext(DirectionAxisFlags.Down, WorldObject.GetOccupancyInfo(this.WorldObjectType));
        public override HomeFurnishingValue HomeValue => homeValue;
        public static readonly HomeFurnishingValue homeValue = new HomeFurnishingValue()
        {
            ObjectName = typeof(CannabisPlantObject).UILink(),
            Category = HousingConfig.GetRoomCategory("Decoration"),
            BaseValue = 4f,
            TypeForRoomLimit = Localizer.DoStr("Cannabis Plant"),
            DiminishingReturnMultiplier = 0.8f

        };



        [Serialized, SyncToView, NewTooltipChildren(CacheAs.Instance, flags: TTFlags.AllowNonControllerTypeForChildren)] public object PersistentData { get; set; }
    }






    //Recipe

    [RequiresModule(typeof(CannabisWorkbenchObject))]   
    [RequiresSkill(typeof(SelfImprovementSkill), 4)]
    
    public partial class CannabisPlantRecipe : RecipeFamily
    {
        public CannabisPlantRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "CannabisPlant",  //noloc
                displayName: Localizer.DoStr("Grow Cannabis Plant *Survivalist*"),


                ingredients: new List<IngredientElement>
                {
                    new IngredientElement(typeof(PlanterPotRoundItem), 2, true),                    
                    new IngredientElement(typeof(CompostFertilizerItem), 4, typeof(SelfImprovementSkill), typeof(SelfImprovementLavishResourcesTalent)),
                    new IngredientElement(typeof(MagicItem), 20, typeof(SelfImprovementSkill), typeof(SelfImprovementLavishResourcesTalent)),
                },


                items: new List<CraftingElement>
                {
                    new CraftingElement<CannabisPlantItem>(2),
                });
            this.Recipes = new List<Recipe> { recipe };

            this.ExperienceOnCraft = 1;

            this.LaborInCalories = CreateLaborInCaloriesValue(420);


            this.CraftMinutes = CreateCraftTimeValue(
                beneficiary: typeof(CannabisPlantRecipe), 
                start: 30f, 
                skillType: typeof(SelfImprovementSkill), typeof(SelfImprovementFocusedSpeedTalent), typeof(SelfImprovementParallelSpeedTalent));


            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Grow Cannabis Plant *Survivalist*"), recipeType: typeof(CannabisPlantRecipe));
            this.ModsPostInitialize();


            CraftingComponent.AddRecipe(tableType: typeof(CannabisGrowBoxObject), recipe: this);
        }


        partial void ModsPreInitialize();


        partial void ModsPostInitialize();
    }



    //Recipe 2 *Farming*


    [RequiresModule(typeof(CannabisWorkbenchObject))]
    [RequiresSkill(typeof(FarmingSkill), 4)]

    public partial class FarmersCannabisPlantRecipe : RecipeFamily
    {
        public FarmersCannabisPlantRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "FarmersCannabisPlant",  //noloc
                displayName: Localizer.DoStr("Grow Cannabis Plant *Farmer*"),


                ingredients: new List<IngredientElement>
                {
                    new IngredientElement(typeof(PlanterPotRoundItem), 2, true),
                    new IngredientElement(typeof(CompostFertilizerItem), 2, typeof(FarmingSkill), typeof(FarmingLavishResourcesTalent)),
                    new IngredientElement(typeof(MagicItem), 10, typeof(FarmingSkill), typeof(FarmingLavishResourcesTalent)),
                },


                items: new List<CraftingElement>
                {
                    new CraftingElement<CannabisPlantItem>(2),
                });
            this.Recipes = new List<Recipe> { recipe };

            this.ExperienceOnCraft = 1;

            this.LaborInCalories = CreateLaborInCaloriesValue(420);


            this.CraftMinutes = CreateCraftTimeValue(
                beneficiary: typeof(FarmersCannabisPlantRecipe),
                start: 15f,
                skillType: typeof(FarmingSkill), typeof(FarmingFocusedSpeedTalent), typeof(FarmingParallelSpeedTalent));


            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Grow Cannabis Plant *Farmer*"), recipeType: typeof(FarmersCannabisPlantRecipe));
            this.ModsPostInitialize();


            CraftingComponent.AddRecipe(tableType: typeof(CannabisGrowBoxObject), recipe: this);
        }


        partial void ModsPreInitialize();


        partial void ModsPostInitialize();
    }

}
